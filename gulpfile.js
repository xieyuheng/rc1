// Generated by CoffeeScript 1.10.0
(function() {
  var execSync, fs, gulp, line_array_to_string, org_array, path, run, tangle;

  gulp = require("gulp");

  execSync = require("child_process").execSync;

  org_array = ["src/recursive-combinator.org"];

  run = function() {
    var fn, i, len, result, results, string;
    result = "";
    fn = function(string) {};
    results = [];
    for (i = 0, len = arguments.length; i < len; i++) {
      string = arguments[i];
      fn(string);
      result = result.concat(" ", string);
      results.push(console.log(execSync(result).toString()));
    }
    return results;
  };

  fs = require("fs");

  path = require("path");

  tangle = function(input_file_name) {
    var cursor, indentation, line, line_array, output_file_name, result_array;
    output_file_name = null;
    line_array = fs.readFileSync(input_file_name).toString().split("\n");
    cursor = 0;
    result_array = [];
    while (cursor < line_array.length) {
      line = line_array[cursor];
      cursor = 1 + cursor;
      if (line.match(new RegExp("#\\+begin_src.*"))) {
        indentation = (line.match(new RegExp("#\\+begin_src.*"))).index;
      }
      if (line.match(new RegExp("#\\+PROPERTY: tangle .*"))) {
        output_file_name = path.join(__dirname, path.dirname(input_file_name), line.match(new RegExp("#\\+PROPERTY: tangle .*"))[0].match(new RegExp("\\b[A-Za-z0-9_\\-]*\\..*\\b"))[0]);
      } else if ((line.match(new RegExp("#\\+begin_src.*"))) && (!line.match(new RegExp(".*:tangle no.*")))) {
        while (cursor < line_array.length) {
          line = line_array[cursor];
          cursor = 1 + cursor;
          if (line.match(new RegExp("#\\+end_src.*"))) {
            break;
          } else {
            result_array.push(line.substring(indentation));
          }
        }
      } else {

      }
    }
    console.log("- tangle to :", output_file_name);
    return fs.writeFileSync(output_file_name, line_array_to_string(result_array));
  };

  line_array_to_string = function(line_array) {
    var fn, i, len, line, result_string;
    result_string = "";
    fn = function(line) {};
    for (i = 0, len = line_array.length; i < len; i++) {
      line = line_array[i];
      fn(line);
      result_string = result_string.concat(line, "\n");
    }
    return result_string;
  };

  gulp.task("default", function() {
    var i, len, ref, results, task_name;
    ref = Object.keys(gulp.tasks).slice(1);
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      task_name = ref[i];
      results.push(console.log("-", task_name));
    }
    return results;
  });

  gulp.task("build", function() {
    console.log("- coffeeing: src/");
    return run("coffee --compile --output lib/ src/");
  });

  gulp.task("tangle", function() {
    var i, len, org, results;
    results = [];
    for (i = 0, len = org_array.length; i < len; i++) {
      org = org_array[i];
      results.push(tangle(org));
    }
    return results;
  });

  gulp.task("run", function() {
    return run("node src/recursive-combinator.js");
  });

  gulp.task("dev", ["tangle", "build", "run"], function() {});

  gulp.task("clean", function() {
    console.log("cleaning *~");
    return run("find . -name '*~' -delete");
  });

}).call(this);
